@model MercPlusClient.Areas.ManageMasterData.Models.PrepTimeModel
@{
    ViewBag.Title = "PrepTime";
    Layout = "~/Views/Shared/_MercPlusLayout.cshtml";
}

<script src="../../Scripts/jquery-1.4.1-vsdoc.js" type="text/javascript"></script>
<script src="~/Areas/ManageMasterData/Script/mainjs.js"></script>
<script type="text/javascript">
    function ValidateNumber(e) {

        var evt = (e) ? e : window.event;

        var charCode = (evt.keyCode) ? evt.keyCode : evt.which;

        if (charCode == 190) {
            return true;
        }
        else if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }

        else

            return true;
    }
    $(function () {
        $('#btnUpdate').click(function (e) {

            var c = $("#drpModenList").val();

            var errMsg = "";
            var isError = false;
            $("#ErrorMsgContainer").html("");



            HighlightInputsForError($("#drpModenList"), false);
            if (c == '') {
                isError = true;
                errMsg += "Please select Mode list";

                HighlightInputsForError($("#drpModenList"), isError);
            }

            if (isError == true) {


                ShowRemoveValidationMessage(errMsg, "Warning");
                return;
            }

            else {
                e.preventDefault();
                $('#divPrepTimeSearch').hide();

                $('#divPrepMaxSearch').show();

                $('#lblErrorMesage').css("display", "none");
                $('#lblMesage').css("display", "none");
                $('#gridContent').css("display", "block");



                $.ajax({
                    url: "/ManageMasterData/ManageMasterData/GetPrepTimemaxList",
                    type: 'POST',
                    data: { Modecode: c },
                    cache: false,
                    success: function (data) {
                        $('#drpModePList').empty();

                        $.each(data, function (index, optionData) {
                            $('#drpModePList').append("<option value='" + optionData.Text + "'>" + optionData.Value + "</option>");
                        });

                    },
                    error: function (data) {

                    }
                });





            }

        });
        $('#btnUpdatePreptime').click(function (e) {
            e.preventDefault();

            var Mo = $('#drpModenList').val();
            var pMax = $('#drpModePList').val();

            var errMsg = "";
            var isError = false;
            $("#ErrorMsgContainer").html("");



            HighlightInputsForError($("#drpModenList"), false);
            if (Mo == '') {
                isError = true;
                errMsg += "Please Select Mode";

                HighlightInputsForError($("#drpModenList"), isError);
            }


            if (isError == true) {


                ShowRemoveValidationMessage(errMsg, "Warning");
                return;
            }


            else {
                $('#lblErrorMesage').css("display", "none");
                $('#lblMesage').css("display", "none");
                $('#gridContent').css("display", "block");

                $('#divPrepTimeSearch').hide();

                $('#divPrepMaxSearch').hide();
                $('#divPrepTimelEdit').show();

                $.ajax({
                    url: "/ManageMasterData/ManageMasterData/GetPrepTimemaxDetial",
                    type: 'POST',
                    data: { Modecode: Mo, pmax: pMax },
                    cache: false,
                    success: function (data) {
                        $("#txtModeCode").val(Mo);
                        $("#txtPreptimeMax").val(data.PrepTimeMax);
                        $("#txtPrepCd").val(data.PrepCd);
                        $("#txtPrepHrs").val(data.PrepHrs);
                        var values = data.ChangeUser.split('|');
                        //alert(values);
                        $("#txtUserID").val(values[0]);
                        $("#txtUserID_Lname").val(values[1]);
                        //   $("#txtModifedTime").val(data.ChangeTime);

                        //var d = new Date();
                        //d.setTime(parseInt(data.ChangeTime.substring(6)));

                        //$("#txtModifedTime").val(FormatDate(d));

                        $("#txtModifedTime").val(data.ChangeTime_Display);

                    },
                    error: function (data) {

                    }
                });





            }

        });

        function FormatDate(date) {
            var hours = date.getHours();
            var minutes = date.getMinutes();
            var seconds = date.getSeconds();
            var ampm = hours >= 12 ? 'PM' : 'AM';
            var month = date.getMonth();
            month++;
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            minutes = minutes < 10 ? '0' + minutes : minutes;
            var strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;
            //return date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear() + "  " + strTime;
            return date.getFullYear() + "-" + month + "-" + +date.getDate() + " " + strTime;

        }
        $('#btnPrepUpdate').click(function (e) {
            ShowRemoveValidationMessage("", "");
            e.preventDefault();
            $('#divPrepTimeSearch').hide();

            $('#divPrepMaxSearch').hide();
            $('#divPrepTimelEdit').show();

            var PrepCode = $("#txtPrepCd").val();
            var Mcode = $("#txtModeCode").val();
            var Mdesc = $('#drpModenList').text();
            var pMax = $("#txtPreptimeMax").val();
            var prephr = $("#txtPrepHrs").val();

            var errMsg = "";

            var isError = false;
            $("#ErrorMsgContainer").html("");



            HighlightInputsForError($("#txtPrepCd"), false);
            if (PrepCode == '') {
                isError = true;
                errMsg += "Please select PrepCode ";

                HighlightInputsForError($("#txtPrepCd"), isError);
            }

            if (!isNumeric(prephr.trim())) {
                isError = true;
                if (errMsg.trim() == "")
                    errMsg += " , PrepHrs can only be digits";
                else
                    errMsg += " PrepHrs can only be digits ";
                HighlightInputsForError($("#txtPrepHrs"), isError)
            }


            if (isError == true) {

                ShowRemoveValidationMessage(errMsg, "Warning");
                return;
            }


            else {
                $('#lblErrorMesage').css("display", "none");
                $('#lblMesage').css("display", "none");
                $('#gridContent').css("display", "block");

                // alert(Mdesc);

                $.ajax({
                    url: "/ManageMasterData/ManageMasterData/UpdatePrepTime",//(string Modecode, string pmax, string PrepCd, string prephrs)",
                    type: 'POST',
                    data: { Modecode: Mcode, pmax: pMax, PrepCd: PrepCode, prephrs: prephr },
                    cache: false,
                    success: function (data) {
                        if (data == "Success") {
                            $("#txtModedes").val(Mdesc);
                            ShowRemoveValidationMessage('Modification Completed', "Success");
                            // ShowRemoveValidationMessage(TempData["Msg"].ToString(), "Success"); 
                            // alert("aa");
                            // $('#modeDesID').show();


                            //-----------------------------------------------
                            $.ajax({
                                url: "/ManageMasterData/ManageMasterData/GetPrepTimemaxDetial",
                                type: 'POST',
                                data: { Modecode: Mcode, pmax: pMax },
                                cache: false,
                                success: function (data) {
                                    $("#txtModeCode").val(Mcode);
                                    $("#txtPreptimeMax").val(data.PrepTimeMax);
                                    $("#txtPrepCd").val(data.PrepCd);
                                    $("#txtPrepHrs").val(data.PrepHrs);
                                    var values = data.ChangeUser.split('|');
                                    $("#txtUserID").val(values[0]);
                                    $("#txtUserID_Lname").val(values[1]);
                                 
                                    $("#txtModifedTime").val(data.ChangeTime_Display);

                                },
                                error: function (data) {

                                }
                            });

                            //-------------------------------------------


                        }
                        else {
                            ShowRemoveValidationMessage(data, "Warning");
                        }
                    },
                    error: function (data) {

                    }
                });





            }

        });


        $('#btnPrepDelete').click(function (e) {


            ShowRemoveValidationMessage("", "");
            var p = false;
            p = confirm("Are you sure you want to delete this record?");
            if (p == true) {
                e.preventDefault();
                $('#divPrepTimeSearch').hide();

                $('#divPrepMaxSearch').hide();
                $('#divPrepTimelEdit').show();

                var PrepCode = $("#txtPrepCd").val();
                var Mcode = $("#txtModeCode").val();
                var Mdesc = $('#drpModenList').text();
                var pMax = $("#txtPreptimeMax").val();
                var prephr = $("#txtPrepHrs").val();

                {
                    $('#lblErrorMesage').css("display", "none");
                    $('#lblMesage').css("display", "none");
                    $('#gridContent').css("display", "block");

                    // alert(Mdesc);

                    $.ajax({
                        url: "/ManageMasterData/ManageMasterData/DeletePrepTime",//(string Modecode, string pmax, string PrepCd, string prephrs)",
                        type: 'POST',
                        data: { Modecode: Mcode, pmax: pMax, PrepCd: PrepCode, prephrs: prephr },
                        cache: false,
                        success: function (data) {
                            if (data == true) {
                                $('#divPrepTimeSearch').show();

                                $('#divPrepMaxSearch').hide();
                                $('#divPrepTimelEdit').hide();

                                //$('#lblMesage').text('**PrepTimeMax: ' + pMax + ' / ' + Mcode + ' Deleted**');
                                //$('#lblMesage').css("display", "block");
                                ShowRemoveValidationMessage('**PrepTimeMax: ' + pMax + ' / ' + Mcode + ' Deleted**', "Success");
                            }
                            else {

                                $('#divPrepTimeSearch').show();

                                $('#divPrepMaxSearch').hide();
                                $('#divPrepTimelEdit').hide();

                                //$('#lblMesage').text('**PrepTimeMax: ' + pMax + ' / ' + Mcode + 'not Deleted**');
                                //$('#lblMesage').css("display", "block");
                                ShowRemoveValidationMessage('**PrepTimeMax: ' + pMax + ' / ' + Mcode + ' not Deleted**', "Warning");

                            }

                        },
                        error: function (data) {

                        }
                    });





                }
            }
        });

    });
    function DivAddShow() {

        $('#divPrepTimeSearch').hide();

        $('#divPrepTimeAdd').show();
        $('#divPrepMaxSearch').hide();
        $("#divPrepTimelEdit").hide();

        ShowRemoveValidationMessage("", "");
    }
    function SearchScreenShow() {
        $('#divPrepTimeSearch').show();

        $('#divPrepTimeAdd').hide();
        $('#divPrepMaxSearch').hide();
        $("#divPrepTimelEdit").hide();
        ShowRemoveValidationMessage("", "");

    }

    //function ValidateNumber(e) {

    //    var evt = (e) ? e : window.event;
    //    var charCode = (evt.keyCode) ? evt.keyCode : evt.which;

    //    //alert(charCode);

    //    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
    //        return false;
    //    }
    //    return true;
    //}

    function isNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }
    function AddRecord() {

        var PrepCode = $("#txtPrepCdA").val();
        // var Mdesc = $("#drpModenListA").selected.Val();
        var Mcode = $('#drpModenListA').val();
        var pMax = $("#txtPreptimeMaxA").val();
        var prephr = $("#txtPrepHrsA").val();
        //  alert(Mcode)
        ShowRemoveValidationMessage("", "");

        var errMsg = "";
        var isError = false;
        $("#ErrorMsgContainer").html("");

        var err = "Please Enter ";

        HighlightInputsForError($("#txtPrepCdA"), false);
        if (PrepCode == '') {
            isError = true;
            // errMsg += "Please provide PrepCode";
            errMsg += " PrepCode ";

            HighlightInputsForError($("#txtPrepCdA"), isError);
        }

        HighlightInputsForError($("#drpModenListA"), false);
        if (Mcode == '') {
            isError = true;

            if (errMsg.length > 1) {
                errMsg += " , Model List ";
            }
            else
                errMsg += " Model List ";

            HighlightInputsForError($("#drpModenListA"), isError);
        }

        HighlightInputsForError($("#txtPreptimeMaxA"), false);
        if (pMax == '') {
            isError = true;


            if (errMsg.length > 1) {
                errMsg += " , PrepTime Max ";
            }
            else
                errMsg += " PrepTime Max ";

            HighlightInputsForError($("#txtPreptimeMaxA"), isError);
        }
        else if (!isNumeric(pMax.trim())) {
            isError = true;
            if (errMsg.trim() == "")
                errMsg += " , PrepTime Max can only be digits";
            else
                errMsg += " PrepTime Max can only be digits ";
            HighlightInputsForError($("#txtPreptimeMaxA"), isError)
        }

        HighlightInputsForError($("#txtPrepHrsA"), false);
        if (prephr == '') {
            isError = true;

            if (errMsg.length > 1) {
                errMsg += " , PrepHrs ";
            }
            else
                errMsg += " PrepHrs ";

            HighlightInputsForError($("#txtPrepHrsA"), isError);
        }
        else if (!isNumeric(prephr.trim())) {
            isError = true;
            if (errMsg.length > 1)
                errMsg += " , PrepHrs can only be digits";
            else
                errMsg += " PrepHrs can only be digits ";
            HighlightInputsForError($("#txtPrepHrsA"), isError)
        }


        if (isError == true) {

            errMsg = err + errMsg;
            ShowRemoveValidationMessage(errMsg, "Warning");
            return;
        }




        {
            $('#lblErrorMesage').css("display", "none");
            $('#lblMesage').css("display", "none");
            $('#gridContent').css("display", "block");

            //  alert(Mcode);

            $.ajax({
                url: "/ManageMasterData/ManageMasterData/AddPrepRecord",//(string Modecode, string pmax, string PrepCd, string prephrs)",
                type: 'POST',
                data: { Modecode: Mcode, pmax: pMax, PrepCd: PrepCode, prephrs: prephr },
                cache: false,
                success: function (data) {
                    if (data == "Success") {
                        $('#divPrepTimeSearch').show();

                        $('#divPrepMaxSearch').hide();
                        $('#divPrepTimelEdit').hide();
                        $('#divPrepTimeAdd').hide();
                        //$('#lblMesage').text('**PrepTimeMax: ' + pMax + ' / ' + Mcode + ' Added**');
                        //$('#lblMesage').css("display", "block");
                        ShowRemoveValidationMessage('**PrepTimeMax: ' + pMax + ' / ' + Mcode + ' Added**', "Success");

                    }
                    else {

                        $('#divPrepTimeSearch').hide();
                        $('#divPrepTimeAdd').show();
                        $('#divPrepMaxSearch').hide();
                        $('#divPrepTimelEdit').hide();
                        ShowRemoveValidationMessage(data, "Warning");

                        // alert(TempData["Msg"].ToString());
                        //$('#lblMesage').text('**PrepTimeMax: ' + pMax + ' / ' + Mcode + 'not Added**');
                        //$('#lblMesage').css("display", "block");
                        // ShowRemoveValidationMessage('**PrepTimeMax: ' + pMax + ' / ' + Mcode + ' not added**', "Warning");

                    }

                },
                error: function (data) {

                }
            });
        }
    }
    </script>

@using (Html.BeginForm())
{
     <div style="float:right;"><a href="~/HelpFiles/help/merc/3_HelpScrns_DoNotChangeStructure/tablemod_preptime_help.htm" target="_blank">Tables and Dependencies Help File</a></div>
     
    <h2>Add, Update or Delete Prep Time</h2>
    
    <div id="ErrorMsgContainer" style="width: 750px; vertical-align: text-top;"> 
            @Html.Raw(TempData["Msg"] != null ? TempData["Msg"].ToString() : "")
    </div>
   
     <div id="divPrepTimeSearch" style=" width: 800px;" >
    <table width="100%">

        
   

        <tr>
            <td class="style3" style="text-align: left; vertical-align: top;">
                @Html.LabelFor(model => model.ModenList)
            </td>
         
        
            <td class="style2" style="text-align: left; vertical-align: top;">
                @Html.DropDownListFor(model => model.ModenList, Model.drpModenList, "Select Mode List", new { id = "drpModenList" })
            </td>
            </tr>
        <tr>
            <td style="text-align: left; vertical-align: top; width: 240px;">
                 
                <input type="button" value="Update - Get Preptime Max" id="btnUpdate" />
            </td>
            <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;
            </td>
            <td style="text-align: left; vertical-align: top; width: 240px;">
                <input type="button" value="AddNew" id="btnAdd" onclick="DivAddShow();" />

            </td>
        </tr>

    </table>
    <br />
    <br />
    </div>
    
    
       
     <div id="divPrepTimeAdd" style="display: none; width: 800px;" >
    <table width="100%">
 
   

        <tr>
            <td class="style3" style="text-align: left; vertical-align: top;">
                @Html.LabelFor(model => model.ModenList)
            </td>
         
        
            <td class="style2" style="text-align: left; vertical-align: top;">
                @Html.DropDownListFor(model => model.ModenListC, Model.drpModenListC, "Select Mode List", new { id = "drpModenListA" })
            </td>
            </tr>

           <tr>
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.PrepTimeMax)
                </td>
                 
          
                <td class="style2" style="text-align: left; vertical-align: top;">
                    @Html.TextBoxFor(model => model.PrepTimeMax, new {maxlength = 8, id = "txtPreptimeMaxA", onkeydown="return ValidateNumber(event);" })
                </td>
                <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;</td>
            </tr>
            <tr>
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.PrepCd)
                </td>

              
         
                <td class="style2" style="text-align: left; vertical-align: top;">
                   
                     
                     @Html.TextBoxFor(model => model.PrepCd, new {maxlength = 4, id = "txtPrepCdA" })
        
                </td>
                <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;</td>
            </tr>
              <tr>
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.PrepHrs)
                </td>

           
             
                <td class="style2" style="text-align: left; vertical-align: top;">                   
                     
                     @Html.TextBoxFor(model => model.PrepHrs, new {maxlength = 8, id = "txtPrepHrsA" , onkeydown="return ValidateNumber(event);"})
        
                </td>
                <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;</td>
            </tr>
        <tr>
            <td style="text-align: left; vertical-align: top; width: 240px;">
                 
                <input type="button" value="Add Record" id="AddRcd" onclick="AddRecord();" />
            </td>
            <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;
            </td>
            <td style="text-align: left; vertical-align: top; width: 240px;">
                <input type="button" value="Return" id="RtnBtn" onclick="SearchScreenShow();"/>

            </td>
        </tr>

    </table>
    <br />
    <br />
    </div>
    
    <div id="divPrepMaxSearch" style="display: none; width: 800px;"  >
    <table width="100%">  

        <tr>
            <td class="style3" style="text-align: left; vertical-align: top;">
                @Html.LabelFor(model => model.ModePList)
            </td>
         
        
            <td class="style2" style="text-align: left; vertical-align: top;">
                @Html.DropDownListFor(model => model.ModePList, Model.drpModePList, "Select Prep Time Max", new { id = "drpModePList" })
            </td>
            </tr>
        <tr>
            <td style="text-align: left; vertical-align: top; width: 240px;">
                 
                <input type="button" value="Update - Get Preptime" id="btnUpdatePreptime" />
            </td>
            <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;
            </td>
            <td style="text-align: left; vertical-align: top; width: 240px;">
                <input type="button" value="AddNew" id="btnAddn"onclick="DivAddShow();" />

            </td>
        </tr>

    </table>
 
    </div>
    
        <div id="divPrepTimelEdit" style="display: none; width: 800px;" >
        <table width="100%">
             
            <tr>
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.ModeCode)
                </td>
               
           
                <td class="style2" style="text-align: left; vertical-align: top;">
                    @Html.TextBoxFor(model => model.ModeCode, new { id = "txtModeCode", @readonly = "readonly" })
                </td>
                <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;</td>
            </tr>
            <tr id ="modeDesID" style="display: none; ">
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.ModeDescription)
                </td>
               
           
                <td class="style2" style="text-align: left; vertical-align: top;">
                    @Html.TextBoxFor(model => model.ModeDescription, new { id = "txtModedes", @readonly = "readonly" })
                </td>
                <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;</td>
            </tr>
            <tr>
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.PrepTimeMax)
                </td>
                 
          
                <td class="style2" style="text-align: left; vertical-align: top;">
                    @Html.TextBoxFor(model => model.PrepTimeMax, new { id = "txtPreptimeMax", @readonly = "readonly" })
                </td>
                <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;</td>
            </tr>
            <tr>
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.PrepCd)
                </td>

              
         
                <td class="style2" style="text-align: left; vertical-align: top;">
                   
                     
                     @Html.TextBoxFor(model => model.PrepCd, new { id = "txtPrepCd" })
        
                </td>
                <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;</td>
            </tr>
              <tr>
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.PrepHrs)
                </td>

           
             
                <td class="style2" style="text-align: left; vertical-align: top;">                   
                     
                     @Html.TextBoxFor(model => model.PrepHrs, new { id = "txtPrepHrs" , onkeydown="return ValidateNumber(event);"})
        
                </td>
                <td style="text-align: left; vertical-align: top; width: 200px;">&nbsp;</td>
            </tr>
            <tr>
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.ChangeUser, new { id = "UserID1" })
                </td>
                   <td style="text-align: left; vertical-align: top;width: 200px;">
                     @Html.TextBoxFor(model => model.ChangeUser, new { id = "txtUserID", @readonly = "readonly" })
                    
                </td>
                   <td style="text-align: left; vertical-align: top; width: 200px;">
                       @Html.TextBoxFor(model => model.ChangeUser, new { id = "txtUserID_Lname", @readonly = "readonly" })
                   </td>
                <td></td>
                </tr>

            <!--- -->
                


            <!-- -->



            <tr>
                
                <td style="text-align: left; vertical-align: top;">
                    @Html.LabelFor(model => model.ChangeTime, new { id = "ModifiedTime" })
                </td>
                    
               
                <td style="text-align: left; vertical-align: top;" colspan="2">
                    @Html.TextBoxFor(model => model.ChangeTime  , new { id = "txtModifedTime", @readonly = "readonly" })
                </td>
                @*<td style="text-align: left; vertical-align: top;">&nbsp;</td>*@
                <td></td>
                </tr>

            <tr>
                <td style="text-align: right; vertical-align: top; width: 200px;">
                 
                    <input type="button" value="Update" id="btnPrepUpdate" />
                 
                <td style="text-align: left; vertical-align: top; width: 190px;">&nbsp;</td>
                <td style="text-align: right; vertical-align: top; width: 200px;">
                 
                    <input type="button" value="Delete" id="btnPrepDelete" />
                
                <td style="text-align: left; vertical-align: top; width: 190px;">&nbsp;</td>
                <td style="text-align: right; vertical-align: top; width: 200px;">
                 
                    <input type="button" value="AddNew" id="btnPrepAdd" onclick="DivAddShow();"/>
                <td></td>
                <td style="text-align: left; vertical-align: top; width: 190px;">&nbsp;</td>
            </tr>


        </table>
    </div>
    <div id="errorlblId">
    <table>
           <tr><td colspan="8">

            @Html.Label("lbl", new { id = "lblErrorMesage", style = "color: red; text-size:12px; display: none;" })
           <br />
           <p style="text-align:center;"><h3>@Html.Label("lbl", new { id = "lblMesage", style = "display: none;" }) </h3></p>
            </td></tr>
    </table>
        </div>
}