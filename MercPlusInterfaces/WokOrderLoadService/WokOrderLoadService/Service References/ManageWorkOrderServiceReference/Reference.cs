//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WokOrderLoadService.ManageWorkOrderServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ManageWorkOrderServiceReference.IManageWorkOrder")]
    public interface IManageWorkOrder {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CallSaveMethod", ReplyAction="http://tempuri.org/IManageWorkOrder/CallSaveMethodResponse")]
        WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodResponse CallSaveMethod(WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CallSaveMethod", ReplyAction="http://tempuri.org/IManageWorkOrder/CallSaveMethodResponse")]
        System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodResponse> CallSaveMethodAsync(WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CallValidateMethod", ReplyAction="http://tempuri.org/IManageWorkOrder/CallValidateMethodResponse")]
        WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodResponse CallValidateMethod(WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CallValidateMethod", ReplyAction="http://tempuri.org/IManageWorkOrder/CallValidateMethodResponse")]
        System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodResponse> CallValidateMethodAsync(WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWorkOrderDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWorkOrderDetailsResponse")]
        MercPlusLibrary.WorkOrderDetail GetWorkOrderDetails(int WorkOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWorkOrderDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWorkOrderDetailsResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail> GetWorkOrderDetailsAsync(int WorkOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetHours", ReplyAction="http://tempuri.org/IManageWorkOrder/GetHoursResponse")]
        WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursResponse GetHours(WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetHours", ReplyAction="http://tempuri.org/IManageWorkOrder/GetHoursResponse")]
        System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursResponse> GetHoursAsync(WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetDamageCodeAll", ReplyAction="http://tempuri.org/IManageWorkOrder/GetDamageCodeAllResponse")]
        System.Collections.Generic.List<MercPlusLibrary.Damage> GetDamageCodeAll(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetDamageCodeAll", ReplyAction="http://tempuri.org/IManageWorkOrder/GetDamageCodeAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Damage>> GetDamageCodeAllAsync(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetShopCodeResponse")]
        System.Collections.Generic.List<MercPlusLibrary.Shop> GetShopCode(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetShopCodeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Shop>> GetShopCodeAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetShopDetailsOnShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetShopDetailsOnShopCodeResponse")]
        MercPlusLibrary.Shop GetShopDetailsOnShopCode(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetShopDetailsOnShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetShopDetailsOnShopCodeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Shop> GetShopDetailsOnShopCodeAsync(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCustomerCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCustomerCodeResponse")]
        System.Collections.Generic.List<MercPlusLibrary.Customer> GetCustomerCode(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCustomerCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCustomerCodeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Customer>> GetCustomerCodeAsync(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCurrency", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCurrencyResponse")]
        string GetCurrency(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCurrency", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCurrencyResponse")]
        System.Threading.Tasks.Task<string> GetCurrencyAsync(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetRepairLocCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetRepairLocCodeResponse")]
        System.Collections.Generic.List<MercPlusLibrary.RepairLoc> GetRepairLocCode(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetRepairLocCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetRepairLocCodeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.RepairLoc>> GetRepairLocCodeAsync(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetRepairCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetRepairCodeResponse")]
        System.Collections.Generic.List<MercPlusLibrary.RepairCode> GetRepairCode(string ModeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetRepairCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetRepairCodeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.RepairCode>> GetRepairCodeAsync(string ModeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetTpiCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetTpiCodeResponse")]
        System.Collections.Generic.List<MercPlusLibrary.Tpi> GetTpiCode(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetTpiCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetTpiCodeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Tpi>> GetTpiCodeAsync(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEM", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEMResponse")]
        MercPlusLibrary.Equipment GetEquipmentDetailsFromRKEM(string EqpNo, string ShopCode, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEM", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEMResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Equipment> GetEquipmentDetailsFromRKEMAsync(string EqpNo, string ShopCode, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/RSByMfgAndModel", ReplyAction="http://tempuri.org/IManageWorkOrder/RSByMfgAndModelResponse")]
        string RSByMfgAndModel(string eqpRUType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/RSByMfgAndModel", ReplyAction="http://tempuri.org/IManageWorkOrder/RSByMfgAndModelResponse")]
        System.Threading.Tasks.Task<string> RSByMfgAndModelAsync(string eqpRUType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/ApproveWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/ApproveWorkOrderResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ApproveWorkOrder(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/ApproveWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/ApproveWorkOrderResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> ApproveWorkOrderAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCustomerCodeByShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCustomerCodeByShopCodeResponse")]
        System.Collections.Generic.List<MercPlusLibrary.Customer> GetCustomerCodeByShopCode(string ShopCode, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCustomerCodeByShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCustomerCodeByShopCodeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Customer>> GetCustomerCodeByShopCodeAsync(string ShopCode, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentType", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentTypeResponse")]
        System.Collections.Generic.List<MercPlusLibrary.EqType> GetEquipmentType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentType", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.EqType>> GetEquipmentTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentSubType", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentSubTypeResponse")]
        System.Collections.Generic.List<MercPlusLibrary.EqsType> GetEquipmentSubType(string EqpType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentSubType", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentSubTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.EqsType>> GetEquipmentSubTypeAsync(string EqpType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWorkOrderResponse")]
        System.Collections.Generic.List<MercPlusLibrary.WorkOrderDetail> GetWorkOrder(
                    string ShopCode, 
                    string FromDate, 
                    string ToDate, 
                    string CustomerCD, 
                    string EqpSize, 
                    string EqpType, 
                    string EqpSType, 
                    string Mode, 
                    string EquipmentNo, 
                    string VenRefNo, 
                    string Cocl, 
                    string Country, 
                    string Location, 
                    string QueryType, 
                    int SortType, 
                    int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWorkOrderResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.WorkOrderDetail>> GetWorkOrderAsync(
                    string ShopCode, 
                    string FromDate, 
                    string ToDate, 
                    string CustomerCD, 
                    string EqpSize, 
                    string EqpType, 
                    string EqpSType, 
                    string Mode, 
                    string EquipmentNo, 
                    string VenRefNo, 
                    string Cocl, 
                    string Country, 
                    string Location, 
                    string QueryType, 
                    int SortType, 
                    int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/RSUserByUserId", ReplyAction="http://tempuri.org/IManageWorkOrder/RSUserByUserIdResponse")]
        System.Nullable<decimal> RSUserByUserId(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/RSUserByUserId", ReplyAction="http://tempuri.org/IManageWorkOrder/RSUserByUserIdResponse")]
        System.Threading.Tasks.Task<System.Nullable<decimal>> RSUserByUserIdAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateWorkOrderResponse")]
        string UpdateWorkOrder(string WO_ID, int Status_Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateWorkOrderResponse")]
        System.Threading.Tasks.Task<string> UpdateWorkOrderAsync(string WO_ID, int Status_Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOIDResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> SetWorkingSwitchByWOID(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> SetWorkingSwitchByWOIDAsync(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWO", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWOResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateCompleteApprovedWO(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWO", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWOResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateCompleteApprovedWOAsync(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrderResponse")]
        string UpdateApproveWorkOrder(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrderResponse")]
        System.Threading.Tasks.Task<string> UpdateApproveWorkOrderAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrderByReview", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrderByReviewResponse")]
        string UpdateApproveWorkOrderByReview(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrderByReview", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrderByReviewResponse")]
        System.Threading.Tasks.Task<string> UpdateApproveWorkOrderByReviewAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOIDByReview", ReplyAction="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOIDByReviewResponse")]
        string SetWorkingSwitchByWOIDByReview(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOIDByReview", ReplyAction="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOIDByReviewResponse")]
        System.Threading.Tasks.Task<string> SetWorkingSwitchByWOIDByReviewAsync(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWOByReview", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWOByReviewResponse")]
        string UpdateCompleteApprovedWOByReview(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWOByReview", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWOByReviewResponse")]
        System.Threading.Tasks.Task<string> UpdateCompleteApprovedWOByReviewAsync(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetVenRefNoByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/GetVenRefNoByWOIDResponse")]
        string GetVenRefNoByWOID(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetVenRefNoByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/GetVenRefNoByWOIDResponse")]
        System.Threading.Tasks.Task<string> GetVenRefNoByWOIDAsync(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/Review", ReplyAction="http://tempuri.org/IManageWorkOrder/ReviewResponse")]
        WokOrderLoadService.ManageWorkOrderServiceReference.ReviewResponse Review(WokOrderLoadService.ManageWorkOrderServiceReference.ReviewRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/Review", ReplyAction="http://tempuri.org/IManageWorkOrder/ReviewResponse")]
        System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.ReviewResponse> ReviewAsync(WokOrderLoadService.ManageWorkOrderServiceReference.ReviewRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SubmitWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/SubmitWorkOrderResponse")]
        WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderResponse SubmitWorkOrder(WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SubmitWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/SubmitWorkOrderResponse")]
        System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderResponse> SubmitWorkOrderAsync(WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetAuditRecord", ReplyAction="http://tempuri.org/IManageWorkOrder/GetAuditRecordResponse")]
        System.Collections.Generic.List<MercPlusLibrary.WorkOrderDetail> GetAuditRecord(string WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetAuditRecord", ReplyAction="http://tempuri.org/IManageWorkOrder/GetAuditRecordResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.WorkOrderDetail>> GetAuditRecordAsync(string WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWOAdditionalDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWOAdditionalDetailsResponse")]
        MercPlusLibrary.WorkOrderDetail GetWOAdditionalDetails(string orderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWOAdditionalDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWOAdditionalDetailsResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail> GetWOAdditionalDetailsAsync(string orderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SaveAsDraft", ReplyAction="http://tempuri.org/IManageWorkOrder/SaveAsDraftResponse")]
        WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftResponse SaveAsDraft(WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SaveAsDraft", ReplyAction="http://tempuri.org/IManageWorkOrder/SaveAsDraftResponse")]
        System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftResponse> SaveAsDraftAsync(WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/ChangeStatus", ReplyAction="http://tempuri.org/IManageWorkOrder/ChangeStatusResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ChangeStatus(int WOID, System.Nullable<short> WOStatus, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/ChangeStatus", ReplyAction="http://tempuri.org/IManageWorkOrder/ChangeStatusResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> ChangeStatusAsync(int WOID, System.Nullable<short> WOStatus, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/LoadRemarksDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/LoadRemarksDetailsResponse")]
        System.Collections.Generic.List<MercPlusLibrary.RemarkEntry> LoadRemarksDetails(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/LoadRemarksDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/LoadRemarksDetailsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.RemarkEntry>> LoadRemarksDetailsAsync(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/AddRemarkByTypeAndWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/AddRemarkByTypeAndWOIDResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> AddRemarkByTypeAndWOID(int WOID, string Remarks, string RemarksType, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/AddRemarkByTypeAndWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/AddRemarkByTypeAndWOIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> AddRemarkByTypeAndWOIDAsync(int WOID, string Remarks, string RemarksType, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateThirdPartyCause", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateThirdPartyCauseResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateThirdPartyCause(int WOID, string NewThirdParty, string NewCause, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateThirdPartyCause", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateThirdPartyCauseResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateThirdPartyCauseAsync(int WOID, string NewThirdParty, string NewCause, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateRepairDateByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateRepairDateByWOIDResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateRepairDateByWOID(int WOID, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateRepairDateByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateRepairDateByWOIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateRepairDateByWOIDAsync(int WOID, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateSerialNumber", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateSerialNumberResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateSerialNumber(int WOID, string RepairCode, string PartNumber, string SerialNumber, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateSerialNumber", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateSerialNumberResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateSerialNumberAsync(int WOID, string RepairCode, string PartNumber, string SerialNumber, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateRevNo", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateRevNoResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateRevNo(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateRevNo", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateRevNoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateRevNoAsync(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateShopWorkingSwitch", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateShopWorkingSwitchResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateShopWorkingSwitch(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateShopWorkingSwitch", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateShopWorkingSwitchResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateShopWorkingSwitchAsync(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetPrevStatusDateLoc", ReplyAction="http://tempuri.org/IManageWorkOrder/GetPrevStatusDateLocResponse")]
        System.Collections.Generic.Dictionary<string, object> GetPrevStatusDateLoc(int WOID, string WOIndicator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetPrevStatusDateLoc", ReplyAction="http://tempuri.org/IManageWorkOrder/GetPrevStatusDateLocResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> GetPrevStatusDateLocAsync(int WOID, string WOIndicator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/AuthenticateShopCodeByUserID", ReplyAction="http://tempuri.org/IManageWorkOrder/AuthenticateShopCodeByUserIDResponse")]
        bool AuthenticateShopCodeByUserID(string ShopCode, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/AuthenticateShopCodeByUserID", ReplyAction="http://tempuri.org/IManageWorkOrder/AuthenticateShopCodeByUserIDResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateShopCodeByUserIDAsync(string ShopCode, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CompleteWorkOrderByID", ReplyAction="http://tempuri.org/IManageWorkOrder/CompleteWorkOrderByIDResponse")]
        System.Collections.Generic.List<MercPlusLibrary.ErrMessage> CompleteWorkOrderByID(int WOID, System.DateTime RepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CompleteWorkOrderByID", ReplyAction="http://tempuri.org/IManageWorkOrder/CompleteWorkOrderByIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> CompleteWorkOrderByIDAsync(int WOID, System.DateTime RepairDate, string ChangeUser);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallSaveMethod", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CallSaveMethodRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrder;
        
        public CallSaveMethodRequest() {
        }
        
        public CallSaveMethodRequest(MercPlusLibrary.WorkOrderDetail WorkOrder) {
            this.WorkOrder = WorkOrder;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallSaveMethodResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CallSaveMethodResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CallSaveMethodResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ErrorMessageList;
        
        public CallSaveMethodResponse() {
        }
        
        public CallSaveMethodResponse(bool CallSaveMethodResult, System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ErrorMessageList) {
            this.CallSaveMethodResult = CallSaveMethodResult;
            this.ErrorMessageList = ErrorMessageList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallValidateMethod", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CallValidateMethodRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.Equipment Equipment;
        
        public CallValidateMethodRequest() {
        }
        
        public CallValidateMethodRequest(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment Equipment) {
            this.WorkOrderDetail = WorkOrderDetail;
            this.Equipment = Equipment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallValidateMethodResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CallValidateMethodResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CallValidateMethodResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ErrorMessageList;
        
        public CallValidateMethodResponse() {
        }
        
        public CallValidateMethodResponse(bool CallValidateMethodResult, MercPlusLibrary.WorkOrderDetail WorkOrderDetail, System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ErrorMessageList) {
            this.CallValidateMethodResult = CallValidateMethodResult;
            this.WorkOrderDetail = WorkOrderDetail;
            this.ErrorMessageList = ErrorMessageList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHours", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetHoursRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrder;
        
        public GetHoursRequest() {
        }
        
        public GetHoursRequest(MercPlusLibrary.WorkOrderDetail WorkOrder) {
            this.WorkOrder = WorkOrder;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHoursResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetHoursResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.Generic.List<MercPlusLibrary.RepairsView> GetHoursResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ErrorMessageList;
        
        public GetHoursResponse() {
        }
        
        public GetHoursResponse(System.Collections.Generic.List<MercPlusLibrary.RepairsView> GetHoursResult, System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ErrorMessageList) {
            this.GetHoursResult = GetHoursResult;
            this.ErrorMessageList = ErrorMessageList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Review", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ReviewRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Collections.Generic.List<MercPlusLibrary.Equipment> EquipmentList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public bool ClientCall;
        
        public ReviewRequest() {
        }
        
        public ReviewRequest(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, System.Collections.Generic.List<MercPlusLibrary.Equipment> EquipmentList, bool ClientCall) {
            this.WorkOrderDetail = WorkOrderDetail;
            this.EquipmentList = EquipmentList;
            this.ClientCall = ClientCall;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReviewResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ReviewResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ReviewResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        public ReviewResponse() {
        }
        
        public ReviewResponse(System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ReviewResult, MercPlusLibrary.WorkOrderDetail WorkOrderDetail) {
            this.ReviewResult = ReviewResult;
            this.WorkOrderDetail = WorkOrderDetail;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SubmitWorkOrder", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SubmitWorkOrderRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Collections.Generic.List<MercPlusLibrary.Equipment> EquipmentList;
        
        public SubmitWorkOrderRequest() {
        }
        
        public SubmitWorkOrderRequest(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, System.Collections.Generic.List<MercPlusLibrary.Equipment> EquipmentList) {
            this.WorkOrderDetail = WorkOrderDetail;
            this.EquipmentList = EquipmentList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SubmitWorkOrderResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SubmitWorkOrderResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> SubmitWorkOrderResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        public SubmitWorkOrderResponse() {
        }
        
        public SubmitWorkOrderResponse(System.Collections.Generic.List<MercPlusLibrary.ErrMessage> SubmitWorkOrderResult, MercPlusLibrary.WorkOrderDetail WorkOrderDetail) {
            this.SubmitWorkOrderResult = SubmitWorkOrderResult;
            this.WorkOrderDetail = WorkOrderDetail;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveAsDraft", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SaveAsDraftRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Collections.Generic.List<MercPlusLibrary.Equipment> EquipmentList;
        
        public SaveAsDraftRequest() {
        }
        
        public SaveAsDraftRequest(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, System.Collections.Generic.List<MercPlusLibrary.Equipment> EquipmentList) {
            this.WorkOrderDetail = WorkOrderDetail;
            this.EquipmentList = EquipmentList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveAsDraftResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SaveAsDraftResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> SaveAsDraftResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        public SaveAsDraftResponse() {
        }
        
        public SaveAsDraftResponse(System.Collections.Generic.List<MercPlusLibrary.ErrMessage> SaveAsDraftResult, MercPlusLibrary.WorkOrderDetail WorkOrderDetail) {
            this.SaveAsDraftResult = SaveAsDraftResult;
            this.WorkOrderDetail = WorkOrderDetail;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManageWorkOrderChannel : WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManageWorkOrderClient : System.ServiceModel.ClientBase<WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder>, WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder {
        
        public ManageWorkOrderClient() {
        }
        
        public ManageWorkOrderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManageWorkOrderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageWorkOrderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageWorkOrderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodResponse WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder.CallSaveMethod(WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodRequest request) {
            return base.Channel.CallSaveMethod(request);
        }
        
        public bool CallSaveMethod(MercPlusLibrary.WorkOrderDetail WorkOrder, out System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ErrorMessageList) {
            WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodRequest inValue = new WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodRequest();
            inValue.WorkOrder = WorkOrder;
            WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodResponse retVal = ((WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder)(this)).CallSaveMethod(inValue);
            ErrorMessageList = retVal.ErrorMessageList;
            return retVal.CallSaveMethodResult;
        }
        
        public System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodResponse> CallSaveMethodAsync(WokOrderLoadService.ManageWorkOrderServiceReference.CallSaveMethodRequest request) {
            return base.Channel.CallSaveMethodAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodResponse WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder.CallValidateMethod(WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodRequest request) {
            return base.Channel.CallValidateMethod(request);
        }
        
        public bool CallValidateMethod(ref MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment Equipment, out System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ErrorMessageList) {
            WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodRequest inValue = new WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodRequest();
            inValue.WorkOrderDetail = WorkOrderDetail;
            inValue.Equipment = Equipment;
            WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodResponse retVal = ((WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder)(this)).CallValidateMethod(inValue);
            WorkOrderDetail = retVal.WorkOrderDetail;
            ErrorMessageList = retVal.ErrorMessageList;
            return retVal.CallValidateMethodResult;
        }
        
        public System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodResponse> CallValidateMethodAsync(WokOrderLoadService.ManageWorkOrderServiceReference.CallValidateMethodRequest request) {
            return base.Channel.CallValidateMethodAsync(request);
        }
        
        public MercPlusLibrary.WorkOrderDetail GetWorkOrderDetails(int WorkOrderID) {
            return base.Channel.GetWorkOrderDetails(WorkOrderID);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail> GetWorkOrderDetailsAsync(int WorkOrderID) {
            return base.Channel.GetWorkOrderDetailsAsync(WorkOrderID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursResponse WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder.GetHours(WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursRequest request) {
            return base.Channel.GetHours(request);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.RepairsView> GetHours(MercPlusLibrary.WorkOrderDetail WorkOrder, out System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ErrorMessageList) {
            WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursRequest inValue = new WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursRequest();
            inValue.WorkOrder = WorkOrder;
            WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursResponse retVal = ((WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder)(this)).GetHours(inValue);
            ErrorMessageList = retVal.ErrorMessageList;
            return retVal.GetHoursResult;
        }
        
        public System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursResponse> GetHoursAsync(WokOrderLoadService.ManageWorkOrderServiceReference.GetHoursRequest request) {
            return base.Channel.GetHoursAsync(request);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.Damage> GetDamageCodeAll(string Code) {
            return base.Channel.GetDamageCodeAll(Code);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Damage>> GetDamageCodeAllAsync(string Code) {
            return base.Channel.GetDamageCodeAllAsync(Code);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.Shop> GetShopCode(int UserID) {
            return base.Channel.GetShopCode(UserID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Shop>> GetShopCodeAsync(int UserID) {
            return base.Channel.GetShopCodeAsync(UserID);
        }
        
        public MercPlusLibrary.Shop GetShopDetailsOnShopCode(string ShopCode) {
            return base.Channel.GetShopDetailsOnShopCode(ShopCode);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Shop> GetShopDetailsOnShopCodeAsync(string ShopCode) {
            return base.Channel.GetShopDetailsOnShopCodeAsync(ShopCode);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.Customer> GetCustomerCode(string ShopCode) {
            return base.Channel.GetCustomerCode(ShopCode);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Customer>> GetCustomerCodeAsync(string ShopCode) {
            return base.Channel.GetCustomerCodeAsync(ShopCode);
        }
        
        public string GetCurrency(string ShopCode) {
            return base.Channel.GetCurrency(ShopCode);
        }
        
        public System.Threading.Tasks.Task<string> GetCurrencyAsync(string ShopCode) {
            return base.Channel.GetCurrencyAsync(ShopCode);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.RepairLoc> GetRepairLocCode(string Code) {
            return base.Channel.GetRepairLocCode(Code);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.RepairLoc>> GetRepairLocCodeAsync(string Code) {
            return base.Channel.GetRepairLocCodeAsync(Code);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.RepairCode> GetRepairCode(string ModeCode) {
            return base.Channel.GetRepairCode(ModeCode);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.RepairCode>> GetRepairCodeAsync(string ModeCode) {
            return base.Channel.GetRepairCodeAsync(ModeCode);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.Tpi> GetTpiCode(string Code) {
            return base.Channel.GetTpiCode(Code);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Tpi>> GetTpiCodeAsync(string Code) {
            return base.Channel.GetTpiCodeAsync(Code);
        }
        
        public MercPlusLibrary.Equipment GetEquipmentDetailsFromRKEM(string EqpNo, string ShopCode, string VendorRefNo) {
            return base.Channel.GetEquipmentDetailsFromRKEM(EqpNo, ShopCode, VendorRefNo);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Equipment> GetEquipmentDetailsFromRKEMAsync(string EqpNo, string ShopCode, string VendorRefNo) {
            return base.Channel.GetEquipmentDetailsFromRKEMAsync(EqpNo, ShopCode, VendorRefNo);
        }
        
        public string RSByMfgAndModel(string eqpRUType) {
            return base.Channel.RSByMfgAndModel(eqpRUType);
        }
        
        public System.Threading.Tasks.Task<string> RSByMfgAndModelAsync(string eqpRUType) {
            return base.Channel.RSByMfgAndModelAsync(eqpRUType);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ApproveWorkOrder(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.ApproveWorkOrder(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> ApproveWorkOrderAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.ApproveWorkOrderAsync(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.Customer> GetCustomerCodeByShopCode(string ShopCode, int UserId) {
            return base.Channel.GetCustomerCodeByShopCode(ShopCode, UserId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.Customer>> GetCustomerCodeByShopCodeAsync(string ShopCode, int UserId) {
            return base.Channel.GetCustomerCodeByShopCodeAsync(ShopCode, UserId);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.EqType> GetEquipmentType() {
            return base.Channel.GetEquipmentType();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.EqType>> GetEquipmentTypeAsync() {
            return base.Channel.GetEquipmentTypeAsync();
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.EqsType> GetEquipmentSubType(string EqpType) {
            return base.Channel.GetEquipmentSubType(EqpType);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.EqsType>> GetEquipmentSubTypeAsync(string EqpType) {
            return base.Channel.GetEquipmentSubTypeAsync(EqpType);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.WorkOrderDetail> GetWorkOrder(
                    string ShopCode, 
                    string FromDate, 
                    string ToDate, 
                    string CustomerCD, 
                    string EqpSize, 
                    string EqpType, 
                    string EqpSType, 
                    string Mode, 
                    string EquipmentNo, 
                    string VenRefNo, 
                    string Cocl, 
                    string Country, 
                    string Location, 
                    string QueryType, 
                    int SortType, 
                    int UserId) {
            return base.Channel.GetWorkOrder(ShopCode, FromDate, ToDate, CustomerCD, EqpSize, EqpType, EqpSType, Mode, EquipmentNo, VenRefNo, Cocl, Country, Location, QueryType, SortType, UserId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.WorkOrderDetail>> GetWorkOrderAsync(
                    string ShopCode, 
                    string FromDate, 
                    string ToDate, 
                    string CustomerCD, 
                    string EqpSize, 
                    string EqpType, 
                    string EqpSType, 
                    string Mode, 
                    string EquipmentNo, 
                    string VenRefNo, 
                    string Cocl, 
                    string Country, 
                    string Location, 
                    string QueryType, 
                    int SortType, 
                    int UserId) {
            return base.Channel.GetWorkOrderAsync(ShopCode, FromDate, ToDate, CustomerCD, EqpSize, EqpType, EqpSType, Mode, EquipmentNo, VenRefNo, Cocl, Country, Location, QueryType, SortType, UserId);
        }
        
        public System.Nullable<decimal> RSUserByUserId(int UserId) {
            return base.Channel.RSUserByUserId(UserId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<decimal>> RSUserByUserIdAsync(int UserId) {
            return base.Channel.RSUserByUserIdAsync(UserId);
        }
        
        public string UpdateWorkOrder(string WO_ID, int Status_Code) {
            return base.Channel.UpdateWorkOrder(WO_ID, Status_Code);
        }
        
        public System.Threading.Tasks.Task<string> UpdateWorkOrderAsync(string WO_ID, int Status_Code) {
            return base.Channel.UpdateWorkOrderAsync(WO_ID, Status_Code);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> SetWorkingSwitchByWOID(int WOID, string Switch, string ChangeUser) {
            return base.Channel.SetWorkingSwitchByWOID(WOID, Switch, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> SetWorkingSwitchByWOIDAsync(int WOID, string Switch, string ChangeUser) {
            return base.Channel.SetWorkingSwitchByWOIDAsync(WOID, Switch, ChangeUser);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateCompleteApprovedWO(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateCompleteApprovedWO(WorkIDs, NewRepairDate, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateCompleteApprovedWOAsync(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateCompleteApprovedWOAsync(WorkIDs, NewRepairDate, ChangeUser);
        }
        
        public string UpdateApproveWorkOrder(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.UpdateApproveWorkOrder(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public System.Threading.Tasks.Task<string> UpdateApproveWorkOrderAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.UpdateApproveWorkOrderAsync(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public string UpdateApproveWorkOrderByReview(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.UpdateApproveWorkOrderByReview(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public System.Threading.Tasks.Task<string> UpdateApproveWorkOrderByReviewAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.UpdateApproveWorkOrderByReviewAsync(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public string SetWorkingSwitchByWOIDByReview(int WOID, string Switch, string ChangeUser) {
            return base.Channel.SetWorkingSwitchByWOIDByReview(WOID, Switch, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<string> SetWorkingSwitchByWOIDByReviewAsync(int WOID, string Switch, string ChangeUser) {
            return base.Channel.SetWorkingSwitchByWOIDByReviewAsync(WOID, Switch, ChangeUser);
        }
        
        public string UpdateCompleteApprovedWOByReview(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateCompleteApprovedWOByReview(WorkIDs, NewRepairDate, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<string> UpdateCompleteApprovedWOByReviewAsync(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateCompleteApprovedWOByReviewAsync(WorkIDs, NewRepairDate, ChangeUser);
        }
        
        public string GetVenRefNoByWOID(int WOID) {
            return base.Channel.GetVenRefNoByWOID(WOID);
        }
        
        public System.Threading.Tasks.Task<string> GetVenRefNoByWOIDAsync(int WOID) {
            return base.Channel.GetVenRefNoByWOIDAsync(WOID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WokOrderLoadService.ManageWorkOrderServiceReference.ReviewResponse WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder.Review(WokOrderLoadService.ManageWorkOrderServiceReference.ReviewRequest request) {
            return base.Channel.Review(request);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> Review(ref MercPlusLibrary.WorkOrderDetail WorkOrderDetail, System.Collections.Generic.List<MercPlusLibrary.Equipment> EquipmentList, bool ClientCall) {
            WokOrderLoadService.ManageWorkOrderServiceReference.ReviewRequest inValue = new WokOrderLoadService.ManageWorkOrderServiceReference.ReviewRequest();
            inValue.WorkOrderDetail = WorkOrderDetail;
            inValue.EquipmentList = EquipmentList;
            inValue.ClientCall = ClientCall;
            WokOrderLoadService.ManageWorkOrderServiceReference.ReviewResponse retVal = ((WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder)(this)).Review(inValue);
            WorkOrderDetail = retVal.WorkOrderDetail;
            return retVal.ReviewResult;
        }
        
        public System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.ReviewResponse> ReviewAsync(WokOrderLoadService.ManageWorkOrderServiceReference.ReviewRequest request) {
            return base.Channel.ReviewAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderResponse WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder.SubmitWorkOrder(WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderRequest request) {
            return base.Channel.SubmitWorkOrder(request);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> SubmitWorkOrder(ref MercPlusLibrary.WorkOrderDetail WorkOrderDetail, System.Collections.Generic.List<MercPlusLibrary.Equipment> EquipmentList) {
            WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderRequest inValue = new WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderRequest();
            inValue.WorkOrderDetail = WorkOrderDetail;
            inValue.EquipmentList = EquipmentList;
            WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderResponse retVal = ((WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder)(this)).SubmitWorkOrder(inValue);
            WorkOrderDetail = retVal.WorkOrderDetail;
            return retVal.SubmitWorkOrderResult;
        }
        
        public System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderResponse> SubmitWorkOrderAsync(WokOrderLoadService.ManageWorkOrderServiceReference.SubmitWorkOrderRequest request) {
            return base.Channel.SubmitWorkOrderAsync(request);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.WorkOrderDetail> GetAuditRecord(string WOID) {
            return base.Channel.GetAuditRecord(WOID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.WorkOrderDetail>> GetAuditRecordAsync(string WOID) {
            return base.Channel.GetAuditRecordAsync(WOID);
        }
        
        public MercPlusLibrary.WorkOrderDetail GetWOAdditionalDetails(string orderNo) {
            return base.Channel.GetWOAdditionalDetails(orderNo);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail> GetWOAdditionalDetailsAsync(string orderNo) {
            return base.Channel.GetWOAdditionalDetailsAsync(orderNo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftResponse WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder.SaveAsDraft(WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftRequest request) {
            return base.Channel.SaveAsDraft(request);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> SaveAsDraft(ref MercPlusLibrary.WorkOrderDetail WorkOrderDetail, System.Collections.Generic.List<MercPlusLibrary.Equipment> EquipmentList) {
            WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftRequest inValue = new WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftRequest();
            inValue.WorkOrderDetail = WorkOrderDetail;
            inValue.EquipmentList = EquipmentList;
            WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftResponse retVal = ((WokOrderLoadService.ManageWorkOrderServiceReference.IManageWorkOrder)(this)).SaveAsDraft(inValue);
            WorkOrderDetail = retVal.WorkOrderDetail;
            return retVal.SaveAsDraftResult;
        }
        
        public System.Threading.Tasks.Task<WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftResponse> SaveAsDraftAsync(WokOrderLoadService.ManageWorkOrderServiceReference.SaveAsDraftRequest request) {
            return base.Channel.SaveAsDraftAsync(request);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> ChangeStatus(int WOID, System.Nullable<short> WOStatus, string ChangeUser) {
            return base.Channel.ChangeStatus(WOID, WOStatus, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> ChangeStatusAsync(int WOID, System.Nullable<short> WOStatus, string ChangeUser) {
            return base.Channel.ChangeStatusAsync(WOID, WOStatus, ChangeUser);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.RemarkEntry> LoadRemarksDetails(int WOID) {
            return base.Channel.LoadRemarksDetails(WOID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.RemarkEntry>> LoadRemarksDetailsAsync(int WOID) {
            return base.Channel.LoadRemarksDetailsAsync(WOID);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> AddRemarkByTypeAndWOID(int WOID, string Remarks, string RemarksType, string ChangeUser) {
            return base.Channel.AddRemarkByTypeAndWOID(WOID, Remarks, RemarksType, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> AddRemarkByTypeAndWOIDAsync(int WOID, string Remarks, string RemarksType, string ChangeUser) {
            return base.Channel.AddRemarkByTypeAndWOIDAsync(WOID, Remarks, RemarksType, ChangeUser);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateThirdPartyCause(int WOID, string NewThirdParty, string NewCause, string ChangeUser) {
            return base.Channel.UpdateThirdPartyCause(WOID, NewThirdParty, NewCause, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateThirdPartyCauseAsync(int WOID, string NewThirdParty, string NewCause, string ChangeUser) {
            return base.Channel.UpdateThirdPartyCauseAsync(WOID, NewThirdParty, NewCause, ChangeUser);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateRepairDateByWOID(int WOID, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateRepairDateByWOID(WOID, NewRepairDate, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateRepairDateByWOIDAsync(int WOID, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateRepairDateByWOIDAsync(WOID, NewRepairDate, ChangeUser);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateSerialNumber(int WOID, string RepairCode, string PartNumber, string SerialNumber, string ChangeUser) {
            return base.Channel.UpdateSerialNumber(WOID, RepairCode, PartNumber, SerialNumber, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateSerialNumberAsync(int WOID, string RepairCode, string PartNumber, string SerialNumber, string ChangeUser) {
            return base.Channel.UpdateSerialNumberAsync(WOID, RepairCode, PartNumber, SerialNumber, ChangeUser);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateRevNo(int WOID) {
            return base.Channel.UpdateRevNo(WOID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateRevNoAsync(int WOID) {
            return base.Channel.UpdateRevNoAsync(WOID);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> UpdateShopWorkingSwitch(int WOID, string Switch, string ChangeUser) {
            return base.Channel.UpdateShopWorkingSwitch(WOID, Switch, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> UpdateShopWorkingSwitchAsync(int WOID, string Switch, string ChangeUser) {
            return base.Channel.UpdateShopWorkingSwitchAsync(WOID, Switch, ChangeUser);
        }
        
        public System.Collections.Generic.Dictionary<string, object> GetPrevStatusDateLoc(int WOID, string WOIndicator) {
            return base.Channel.GetPrevStatusDateLoc(WOID, WOIndicator);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> GetPrevStatusDateLocAsync(int WOID, string WOIndicator) {
            return base.Channel.GetPrevStatusDateLocAsync(WOID, WOIndicator);
        }
        
        public bool AuthenticateShopCodeByUserID(string ShopCode, int UserID) {
            return base.Channel.AuthenticateShopCodeByUserID(ShopCode, UserID);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateShopCodeByUserIDAsync(string ShopCode, int UserID) {
            return base.Channel.AuthenticateShopCodeByUserIDAsync(ShopCode, UserID);
        }
        
        public System.Collections.Generic.List<MercPlusLibrary.ErrMessage> CompleteWorkOrderByID(int WOID, System.DateTime RepairDate, string ChangeUser) {
            return base.Channel.CompleteWorkOrderByID(WOID, RepairDate, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MercPlusLibrary.ErrMessage>> CompleteWorkOrderByIDAsync(int WOID, System.DateTime RepairDate, string ChangeUser) {
            return base.Channel.CompleteWorkOrderByIDAsync(WOID, RepairDate, ChangeUser);
        }
    }
}
