//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MercWorkOrderWebService.WorkOrderServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WorkOrderServiceReference.IManageWorkOrder")]
    public interface IManageWorkOrder {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CallSaveMethod", ReplyAction="http://tempuri.org/IManageWorkOrder/CallSaveMethodResponse")]
        MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodResponse CallSaveMethod(MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CallSaveMethod", ReplyAction="http://tempuri.org/IManageWorkOrder/CallSaveMethodResponse")]
        System.Threading.Tasks.Task<MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodResponse> CallSaveMethodAsync(MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CallValidateMethod", ReplyAction="http://tempuri.org/IManageWorkOrder/CallValidateMethodResponse")]
        MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodResponse CallValidateMethod(MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CallValidateMethod", ReplyAction="http://tempuri.org/IManageWorkOrder/CallValidateMethodResponse")]
        System.Threading.Tasks.Task<MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodResponse> CallValidateMethodAsync(MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWorkOrderDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWorkOrderDetailsResponse")]
        MercPlusLibrary.WorkOrderDetail GetWorkOrderDetails(int WorkOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWorkOrderDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWorkOrderDetailsResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail> GetWorkOrderDetailsAsync(int WorkOrderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetHours", ReplyAction="http://tempuri.org/IManageWorkOrder/GetHoursResponse")]
        MercWorkOrderWebService.WorkOrderServiceReference.GetHoursResponse GetHours(MercWorkOrderWebService.WorkOrderServiceReference.GetHoursRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetHours", ReplyAction="http://tempuri.org/IManageWorkOrder/GetHoursResponse")]
        System.Threading.Tasks.Task<MercWorkOrderWebService.WorkOrderServiceReference.GetHoursResponse> GetHoursAsync(MercWorkOrderWebService.WorkOrderServiceReference.GetHoursRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetDamageCodeAll", ReplyAction="http://tempuri.org/IManageWorkOrder/GetDamageCodeAllResponse")]
        MercPlusLibrary.Damage[] GetDamageCodeAll(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetDamageCodeAll", ReplyAction="http://tempuri.org/IManageWorkOrder/GetDamageCodeAllResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Damage[]> GetDamageCodeAllAsync(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetShopCodeResponse")]
        MercPlusLibrary.Shop[] GetShopCode(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetShopCodeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Shop[]> GetShopCodeAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetShopDetailsOnShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetShopDetailsOnShopCodeResponse")]
        MercPlusLibrary.Shop GetShopDetailsOnShopCode(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetShopDetailsOnShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetShopDetailsOnShopCodeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Shop> GetShopDetailsOnShopCodeAsync(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCustomerCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCustomerCodeResponse")]
        MercPlusLibrary.Customer[] GetCustomerCode(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCustomerCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCustomerCodeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Customer[]> GetCustomerCodeAsync(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCurrency", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCurrencyResponse")]
        string GetCurrency(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCurrency", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCurrencyResponse")]
        System.Threading.Tasks.Task<string> GetCurrencyAsync(string ShopCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetRepairLocCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetRepairLocCodeResponse")]
        MercPlusLibrary.RepairLoc[] GetRepairLocCode(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetRepairLocCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetRepairLocCodeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.RepairLoc[]> GetRepairLocCodeAsync(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetRepairCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetRepairCodeResponse")]
        MercPlusLibrary.RepairCode[] GetRepairCode(string ModeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetRepairCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetRepairCodeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.RepairCode[]> GetRepairCodeAsync(string ModeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetTpiCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetTpiCodeResponse")]
        MercPlusLibrary.Tpi[] GetTpiCode(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetTpiCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetTpiCodeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Tpi[]> GetTpiCodeAsync(string Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEM", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEMResponse")]
        MercPlusLibrary.Equipment GetEquipmentDetailsFromRKEM(string EqpNo, string ShopCode, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEM", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEMResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Equipment> GetEquipmentDetailsFromRKEMAsync(string EqpNo, string ShopCode, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEMOnTab", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEMOnTabResponse")]
        MercPlusLibrary.Equipment GetEquipmentDetailsFromRKEMOnTab(string EqpNo, string ShopCode, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEMOnTab", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentDetailsFromRKEMOnTabResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Equipment> GetEquipmentDetailsFromRKEMOnTabAsync(string EqpNo, string ShopCode, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/RSByMfgAndModel", ReplyAction="http://tempuri.org/IManageWorkOrder/RSByMfgAndModelResponse")]
        string RSByMfgAndModel(string eqpRUType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/RSByMfgAndModel", ReplyAction="http://tempuri.org/IManageWorkOrder/RSByMfgAndModelResponse")]
        System.Threading.Tasks.Task<string> RSByMfgAndModelAsync(string eqpRUType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/ApproveWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/ApproveWorkOrderResponse")]
        MercPlusLibrary.ErrMessage[] ApproveWorkOrder(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/ApproveWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/ApproveWorkOrderResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> ApproveWorkOrderAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCustomerCodeByShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCustomerCodeByShopCodeResponse")]
        MercPlusLibrary.Customer[] GetCustomerCodeByShopCode(string ShopCode, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetCustomerCodeByShopCode", ReplyAction="http://tempuri.org/IManageWorkOrder/GetCustomerCodeByShopCodeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.Customer[]> GetCustomerCodeByShopCodeAsync(string ShopCode, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentType", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentTypeResponse")]
        MercPlusLibrary.EqType[] GetEquipmentType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentType", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentTypeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.EqType[]> GetEquipmentTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentSubType", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentSubTypeResponse")]
        MercPlusLibrary.EqsType[] GetEquipmentSubType(string EqpType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetEquipmentSubType", ReplyAction="http://tempuri.org/IManageWorkOrder/GetEquipmentSubTypeResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.EqsType[]> GetEquipmentSubTypeAsync(string EqpType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWorkOrderResponse")]
        MercPlusLibrary.WorkOrderDetail[] GetWorkOrder(
                    int ShopCode, 
                    string FromDate, 
                    string ToDate, 
                    string CustomerCD, 
                    string EqpSize, 
                    string EqpType, 
                    string EqpSType, 
                    string Mode, 
                    string EquipmentNo, 
                    string VenRefNo, 
                    string Cocl, 
                    string Country, 
                    string Location, 
                    int QueryType, 
                    int SortType, 
                    int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWorkOrderResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail[]> GetWorkOrderAsync(
                    int ShopCode, 
                    string FromDate, 
                    string ToDate, 
                    string CustomerCD, 
                    string EqpSize, 
                    string EqpType, 
                    string EqpSType, 
                    string Mode, 
                    string EquipmentNo, 
                    string VenRefNo, 
                    string Cocl, 
                    string Country, 
                    string Location, 
                    int QueryType, 
                    int SortType, 
                    int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/RSUserByUserId", ReplyAction="http://tempuri.org/IManageWorkOrder/RSUserByUserIdResponse")]
        System.Nullable<decimal> RSUserByUserId(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/RSUserByUserId", ReplyAction="http://tempuri.org/IManageWorkOrder/RSUserByUserIdResponse")]
        System.Threading.Tasks.Task<System.Nullable<decimal>> RSUserByUserIdAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateWorkOrderResponse")]
        string UpdateWorkOrder(string WO_ID, int Status_Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateWorkOrderResponse")]
        System.Threading.Tasks.Task<string> UpdateWorkOrderAsync(string WO_ID, int Status_Code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOIDResponse")]
        MercPlusLibrary.ErrMessage[] SetWorkingSwitchByWOID(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/SetWorkingSwitchByWOIDResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> SetWorkingSwitchByWOIDAsync(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWO", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWOResponse")]
        MercPlusLibrary.ErrMessage[] UpdateCompleteApprovedWO(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWO", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateCompleteApprovedWOResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateCompleteApprovedWOAsync(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrderResponse")]
        MercPlusLibrary.ErrMessage[] UpdateApproveWorkOrder(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateApproveWorkOrderResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateApproveWorkOrderAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetVenRefNoByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/GetVenRefNoByWOIDResponse")]
        string GetVenRefNoByWOID(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetVenRefNoByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/GetVenRefNoByWOIDResponse")]
        System.Threading.Tasks.Task<string> GetVenRefNoByWOIDAsync(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/Review", ReplyAction="http://tempuri.org/IManageWorkOrder/ReviewResponse")]
        MercWorkOrderWebService.WorkOrderServiceReference.ReviewResponse Review(MercWorkOrderWebService.WorkOrderServiceReference.ReviewRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/Review", ReplyAction="http://tempuri.org/IManageWorkOrder/ReviewResponse")]
        System.Threading.Tasks.Task<MercWorkOrderWebService.WorkOrderServiceReference.ReviewResponse> ReviewAsync(MercWorkOrderWebService.WorkOrderServiceReference.ReviewRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SubmitWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/SubmitWorkOrderResponse")]
        MercPlusLibrary.ErrMessage[] SubmitWorkOrder(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SubmitWorkOrder", ReplyAction="http://tempuri.org/IManageWorkOrder/SubmitWorkOrderResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> SubmitWorkOrderAsync(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetAuditRecord", ReplyAction="http://tempuri.org/IManageWorkOrder/GetAuditRecordResponse")]
        MercPlusLibrary.WorkOrderDetail[] GetAuditRecord(string WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetAuditRecord", ReplyAction="http://tempuri.org/IManageWorkOrder/GetAuditRecordResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail[]> GetAuditRecordAsync(string WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWOAdditionalDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWOAdditionalDetailsResponse")]
        MercPlusLibrary.WorkOrderDetail GetWOAdditionalDetails(string orderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetWOAdditionalDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/GetWOAdditionalDetailsResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail> GetWOAdditionalDetailsAsync(string orderNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SaveAsDraft", ReplyAction="http://tempuri.org/IManageWorkOrder/SaveAsDraftResponse")]
        MercPlusLibrary.ErrMessage[] SaveAsDraft(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/SaveAsDraft", ReplyAction="http://tempuri.org/IManageWorkOrder/SaveAsDraftResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> SaveAsDraftAsync(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/ChangeStatus", ReplyAction="http://tempuri.org/IManageWorkOrder/ChangeStatusResponse")]
        MercPlusLibrary.ErrMessage[] ChangeStatus(int WOID, System.Nullable<short> WOStatus, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/ChangeStatus", ReplyAction="http://tempuri.org/IManageWorkOrder/ChangeStatusResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> ChangeStatusAsync(int WOID, System.Nullable<short> WOStatus, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/LoadRemarksDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/LoadRemarksDetailsResponse")]
        MercPlusLibrary.RemarkEntry[] LoadRemarksDetails(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/LoadRemarksDetails", ReplyAction="http://tempuri.org/IManageWorkOrder/LoadRemarksDetailsResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.RemarkEntry[]> LoadRemarksDetailsAsync(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/AddRemarkByTypeAndWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/AddRemarkByTypeAndWOIDResponse")]
        MercPlusLibrary.ErrMessage[] AddRemarkByTypeAndWOID(int WOID, string Remarks, string RemarksType, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/AddRemarkByTypeAndWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/AddRemarkByTypeAndWOIDResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> AddRemarkByTypeAndWOIDAsync(int WOID, string Remarks, string RemarksType, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateThirdPartyCause", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateThirdPartyCauseResponse")]
        MercPlusLibrary.ErrMessage[] UpdateThirdPartyCause(int WOID, string NewThirdParty, string NewCause, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateThirdPartyCause", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateThirdPartyCauseResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateThirdPartyCauseAsync(int WOID, string NewThirdParty, string NewCause, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateRepairDateByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateRepairDateByWOIDResponse")]
        MercPlusLibrary.ErrMessage[] UpdateRepairDateByWOID(int WOID, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateRepairDateByWOID", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateRepairDateByWOIDResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateRepairDateByWOIDAsync(int WOID, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateSerialNumber", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateSerialNumberResponse")]
        MercPlusLibrary.ErrMessage[] UpdateSerialNumber(int WOID, string RepairCode, string PartNumber, string SerialNumber, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateSerialNumber", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateSerialNumberResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateSerialNumberAsync(int WOID, string RepairCode, string PartNumber, string SerialNumber, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateRevNo", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateRevNoResponse")]
        MercPlusLibrary.ErrMessage[] UpdateRevNo(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateRevNo", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateRevNoResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateRevNoAsync(int WOID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateShopWorkingSwitch", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateShopWorkingSwitchResponse")]
        MercPlusLibrary.ErrMessage[] UpdateShopWorkingSwitch(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/UpdateShopWorkingSwitch", ReplyAction="http://tempuri.org/IManageWorkOrder/UpdateShopWorkingSwitchResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateShopWorkingSwitchAsync(int WOID, string Switch, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetPrevStatusDateLoc", ReplyAction="http://tempuri.org/IManageWorkOrder/GetPrevStatusDateLocResponse")]
        System.Collections.Generic.Dictionary<string, object> GetPrevStatusDateLoc(int WOID, string WOIndicator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/GetPrevStatusDateLoc", ReplyAction="http://tempuri.org/IManageWorkOrder/GetPrevStatusDateLocResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> GetPrevStatusDateLocAsync(int WOID, string WOIndicator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/AuthenticateShopCodeByUserID", ReplyAction="http://tempuri.org/IManageWorkOrder/AuthenticateShopCodeByUserIDResponse")]
        bool AuthenticateShopCodeByUserID(string ShopCode, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/AuthenticateShopCodeByUserID", ReplyAction="http://tempuri.org/IManageWorkOrder/AuthenticateShopCodeByUserIDResponse")]
        System.Threading.Tasks.Task<bool> AuthenticateShopCodeByUserIDAsync(string ShopCode, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CompleteWorkOrderByID", ReplyAction="http://tempuri.org/IManageWorkOrder/CompleteWorkOrderByIDResponse")]
        MercPlusLibrary.ErrMessage[] CompleteWorkOrderByID(int WOID, System.DateTime RepairDate, string ChangeUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorkOrder/CompleteWorkOrderByID", ReplyAction="http://tempuri.org/IManageWorkOrder/CompleteWorkOrderByIDResponse")]
        System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> CompleteWorkOrderByIDAsync(int WOID, System.DateTime RepairDate, string ChangeUser);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallSaveMethod", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CallSaveMethodRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrder;
        
        public CallSaveMethodRequest() {
        }
        
        public CallSaveMethodRequest(MercPlusLibrary.WorkOrderDetail WorkOrder) {
            this.WorkOrder = WorkOrder;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallSaveMethodResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CallSaveMethodResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CallSaveMethodResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.ErrMessage[] ErrorMessageList;
        
        public CallSaveMethodResponse() {
        }
        
        public CallSaveMethodResponse(bool CallSaveMethodResult, MercPlusLibrary.ErrMessage[] ErrorMessageList) {
            this.CallSaveMethodResult = CallSaveMethodResult;
            this.ErrorMessageList = ErrorMessageList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallValidateMethod", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CallValidateMethodRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.Equipment[] EquipmentList;
        
        public CallValidateMethodRequest() {
        }
        
        public CallValidateMethodRequest(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList) {
            this.WorkOrderDetail = WorkOrderDetail;
            this.EquipmentList = EquipmentList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallValidateMethodResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CallValidateMethodResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool CallValidateMethodResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public MercPlusLibrary.ErrMessage[] ErrorMessageList;
        
        public CallValidateMethodResponse() {
        }
        
        public CallValidateMethodResponse(bool CallValidateMethodResult, MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.ErrMessage[] ErrorMessageList) {
            this.CallValidateMethodResult = CallValidateMethodResult;
            this.WorkOrderDetail = WorkOrderDetail;
            this.ErrorMessageList = ErrorMessageList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHours", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetHoursRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrder;
        
        public GetHoursRequest() {
        }
        
        public GetHoursRequest(MercPlusLibrary.WorkOrderDetail WorkOrder) {
            this.WorkOrder = WorkOrder;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHoursResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetHoursResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.RepairsView[] GetHoursResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.ErrMessage[] ErrorMessageList;
        
        public GetHoursResponse() {
        }
        
        public GetHoursResponse(MercPlusLibrary.RepairsView[] GetHoursResult, MercPlusLibrary.ErrMessage[] ErrorMessageList) {
            this.GetHoursResult = GetHoursResult;
            this.ErrorMessageList = ErrorMessageList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Review", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ReviewRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.Equipment[] EquipmentList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public bool ClientCall;
        
        public ReviewRequest() {
        }
        
        public ReviewRequest(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList, bool ClientCall) {
            this.WorkOrderDetail = WorkOrderDetail;
            this.EquipmentList = EquipmentList;
            this.ClientCall = ClientCall;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReviewResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ReviewResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MercPlusLibrary.ErrMessage[] ReviewResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MercPlusLibrary.WorkOrderDetail WorkOrderDetail;
        
        public ReviewResponse() {
        }
        
        public ReviewResponse(MercPlusLibrary.ErrMessage[] ReviewResult, MercPlusLibrary.WorkOrderDetail WorkOrderDetail) {
            this.ReviewResult = ReviewResult;
            this.WorkOrderDetail = WorkOrderDetail;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManageWorkOrderChannel : MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManageWorkOrderClient : System.ServiceModel.ClientBase<MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder>, MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder {
        
        public ManageWorkOrderClient() {
        }
        
        public ManageWorkOrderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManageWorkOrderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageWorkOrderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageWorkOrderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodResponse MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder.CallSaveMethod(MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodRequest request) {
            return base.Channel.CallSaveMethod(request);
        }
        
        public bool CallSaveMethod(MercPlusLibrary.WorkOrderDetail WorkOrder, out MercPlusLibrary.ErrMessage[] ErrorMessageList) {
            MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodRequest inValue = new MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodRequest();
            inValue.WorkOrder = WorkOrder;
            MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodResponse retVal = ((MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder)(this)).CallSaveMethod(inValue);
            ErrorMessageList = retVal.ErrorMessageList;
            return retVal.CallSaveMethodResult;
        }
        
        public System.Threading.Tasks.Task<MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodResponse> CallSaveMethodAsync(MercWorkOrderWebService.WorkOrderServiceReference.CallSaveMethodRequest request) {
            return base.Channel.CallSaveMethodAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodResponse MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder.CallValidateMethod(MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodRequest request) {
            return base.Channel.CallValidateMethod(request);
        }
        
        public bool CallValidateMethod(ref MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList, out MercPlusLibrary.ErrMessage[] ErrorMessageList) {
            MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodRequest inValue = new MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodRequest();
            inValue.WorkOrderDetail = WorkOrderDetail;
            inValue.EquipmentList = EquipmentList;
            MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodResponse retVal = ((MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder)(this)).CallValidateMethod(inValue);
            WorkOrderDetail = retVal.WorkOrderDetail;
            ErrorMessageList = retVal.ErrorMessageList;
            return retVal.CallValidateMethodResult;
        }
        
        public System.Threading.Tasks.Task<MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodResponse> CallValidateMethodAsync(MercWorkOrderWebService.WorkOrderServiceReference.CallValidateMethodRequest request) {
            return base.Channel.CallValidateMethodAsync(request);
        }
        
        public MercPlusLibrary.WorkOrderDetail GetWorkOrderDetails(int WorkOrderID) {
            return base.Channel.GetWorkOrderDetails(WorkOrderID);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail> GetWorkOrderDetailsAsync(int WorkOrderID) {
            return base.Channel.GetWorkOrderDetailsAsync(WorkOrderID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MercWorkOrderWebService.WorkOrderServiceReference.GetHoursResponse MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder.GetHours(MercWorkOrderWebService.WorkOrderServiceReference.GetHoursRequest request) {
            return base.Channel.GetHours(request);
        }
        
        public MercPlusLibrary.RepairsView[] GetHours(MercPlusLibrary.WorkOrderDetail WorkOrder, out MercPlusLibrary.ErrMessage[] ErrorMessageList) {
            MercWorkOrderWebService.WorkOrderServiceReference.GetHoursRequest inValue = new MercWorkOrderWebService.WorkOrderServiceReference.GetHoursRequest();
            inValue.WorkOrder = WorkOrder;
            MercWorkOrderWebService.WorkOrderServiceReference.GetHoursResponse retVal = ((MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder)(this)).GetHours(inValue);
            ErrorMessageList = retVal.ErrorMessageList;
            return retVal.GetHoursResult;
        }
        
        public System.Threading.Tasks.Task<MercWorkOrderWebService.WorkOrderServiceReference.GetHoursResponse> GetHoursAsync(MercWorkOrderWebService.WorkOrderServiceReference.GetHoursRequest request) {
            return base.Channel.GetHoursAsync(request);
        }
        
        public MercPlusLibrary.Damage[] GetDamageCodeAll(string Code) {
            return base.Channel.GetDamageCodeAll(Code);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Damage[]> GetDamageCodeAllAsync(string Code) {
            return base.Channel.GetDamageCodeAllAsync(Code);
        }
        
        public MercPlusLibrary.Shop[] GetShopCode(int UserID) {
            return base.Channel.GetShopCode(UserID);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Shop[]> GetShopCodeAsync(int UserID) {
            return base.Channel.GetShopCodeAsync(UserID);
        }
        
        public MercPlusLibrary.Shop GetShopDetailsOnShopCode(string ShopCode) {
            return base.Channel.GetShopDetailsOnShopCode(ShopCode);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Shop> GetShopDetailsOnShopCodeAsync(string ShopCode) {
            return base.Channel.GetShopDetailsOnShopCodeAsync(ShopCode);
        }
        
        public MercPlusLibrary.Customer[] GetCustomerCode(string ShopCode) {
            return base.Channel.GetCustomerCode(ShopCode);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Customer[]> GetCustomerCodeAsync(string ShopCode) {
            return base.Channel.GetCustomerCodeAsync(ShopCode);
        }
        
        public string GetCurrency(string ShopCode) {
            return base.Channel.GetCurrency(ShopCode);
        }
        
        public System.Threading.Tasks.Task<string> GetCurrencyAsync(string ShopCode) {
            return base.Channel.GetCurrencyAsync(ShopCode);
        }
        
        public MercPlusLibrary.RepairLoc[] GetRepairLocCode(string Code) {
            return base.Channel.GetRepairLocCode(Code);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.RepairLoc[]> GetRepairLocCodeAsync(string Code) {
            return base.Channel.GetRepairLocCodeAsync(Code);
        }
        
        public MercPlusLibrary.RepairCode[] GetRepairCode(string ModeCode) {
            return base.Channel.GetRepairCode(ModeCode);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.RepairCode[]> GetRepairCodeAsync(string ModeCode) {
            return base.Channel.GetRepairCodeAsync(ModeCode);
        }
        
        public MercPlusLibrary.Tpi[] GetTpiCode(string Code) {
            return base.Channel.GetTpiCode(Code);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Tpi[]> GetTpiCodeAsync(string Code) {
            return base.Channel.GetTpiCodeAsync(Code);
        }
        
        public MercPlusLibrary.Equipment GetEquipmentDetailsFromRKEM(string EqpNo, string ShopCode, string VendorRefNo) {
            return base.Channel.GetEquipmentDetailsFromRKEM(EqpNo, ShopCode, VendorRefNo);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Equipment> GetEquipmentDetailsFromRKEMAsync(string EqpNo, string ShopCode, string VendorRefNo) {
            return base.Channel.GetEquipmentDetailsFromRKEMAsync(EqpNo, ShopCode, VendorRefNo);
        }
        
        public MercPlusLibrary.Equipment GetEquipmentDetailsFromRKEMOnTab(string EqpNo, string ShopCode, string VendorRefNo) {
            return base.Channel.GetEquipmentDetailsFromRKEMOnTab(EqpNo, ShopCode, VendorRefNo);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Equipment> GetEquipmentDetailsFromRKEMOnTabAsync(string EqpNo, string ShopCode, string VendorRefNo) {
            return base.Channel.GetEquipmentDetailsFromRKEMOnTabAsync(EqpNo, ShopCode, VendorRefNo);
        }
        
        public string RSByMfgAndModel(string eqpRUType) {
            return base.Channel.RSByMfgAndModel(eqpRUType);
        }
        
        public System.Threading.Tasks.Task<string> RSByMfgAndModelAsync(string eqpRUType) {
            return base.Channel.RSByMfgAndModelAsync(eqpRUType);
        }
        
        public MercPlusLibrary.ErrMessage[] ApproveWorkOrder(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.ApproveWorkOrder(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> ApproveWorkOrderAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.ApproveWorkOrderAsync(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public MercPlusLibrary.Customer[] GetCustomerCodeByShopCode(string ShopCode, int UserId) {
            return base.Channel.GetCustomerCodeByShopCode(ShopCode, UserId);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.Customer[]> GetCustomerCodeByShopCodeAsync(string ShopCode, int UserId) {
            return base.Channel.GetCustomerCodeByShopCodeAsync(ShopCode, UserId);
        }
        
        public MercPlusLibrary.EqType[] GetEquipmentType() {
            return base.Channel.GetEquipmentType();
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.EqType[]> GetEquipmentTypeAsync() {
            return base.Channel.GetEquipmentTypeAsync();
        }
        
        public MercPlusLibrary.EqsType[] GetEquipmentSubType(string EqpType) {
            return base.Channel.GetEquipmentSubType(EqpType);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.EqsType[]> GetEquipmentSubTypeAsync(string EqpType) {
            return base.Channel.GetEquipmentSubTypeAsync(EqpType);
        }
        
        public MercPlusLibrary.WorkOrderDetail[] GetWorkOrder(
                    int ShopCode, 
                    string FromDate, 
                    string ToDate, 
                    string CustomerCD, 
                    string EqpSize, 
                    string EqpType, 
                    string EqpSType, 
                    string Mode, 
                    string EquipmentNo, 
                    string VenRefNo, 
                    string Cocl, 
                    string Country, 
                    string Location, 
                    int QueryType, 
                    int SortType, 
                    int UserId) {
            return base.Channel.GetWorkOrder(ShopCode, FromDate, ToDate, CustomerCD, EqpSize, EqpType, EqpSType, Mode, EquipmentNo, VenRefNo, Cocl, Country, Location, QueryType, SortType, UserId);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail[]> GetWorkOrderAsync(
                    int ShopCode, 
                    string FromDate, 
                    string ToDate, 
                    string CustomerCD, 
                    string EqpSize, 
                    string EqpType, 
                    string EqpSType, 
                    string Mode, 
                    string EquipmentNo, 
                    string VenRefNo, 
                    string Cocl, 
                    string Country, 
                    string Location, 
                    int QueryType, 
                    int SortType, 
                    int UserId) {
            return base.Channel.GetWorkOrderAsync(ShopCode, FromDate, ToDate, CustomerCD, EqpSize, EqpType, EqpSType, Mode, EquipmentNo, VenRefNo, Cocl, Country, Location, QueryType, SortType, UserId);
        }
        
        public System.Nullable<decimal> RSUserByUserId(int UserId) {
            return base.Channel.RSUserByUserId(UserId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<decimal>> RSUserByUserIdAsync(int UserId) {
            return base.Channel.RSUserByUserIdAsync(UserId);
        }
        
        public string UpdateWorkOrder(string WO_ID, int Status_Code) {
            return base.Channel.UpdateWorkOrder(WO_ID, Status_Code);
        }
        
        public System.Threading.Tasks.Task<string> UpdateWorkOrderAsync(string WO_ID, int Status_Code) {
            return base.Channel.UpdateWorkOrderAsync(WO_ID, Status_Code);
        }
        
        public MercPlusLibrary.ErrMessage[] SetWorkingSwitchByWOID(int WOID, string Switch, string ChangeUser) {
            return base.Channel.SetWorkingSwitchByWOID(WOID, Switch, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> SetWorkingSwitchByWOIDAsync(int WOID, string Switch, string ChangeUser) {
            return base.Channel.SetWorkingSwitchByWOIDAsync(WOID, Switch, ChangeUser);
        }
        
        public MercPlusLibrary.ErrMessage[] UpdateCompleteApprovedWO(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateCompleteApprovedWO(WorkIDs, NewRepairDate, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateCompleteApprovedWOAsync(int WorkIDs, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateCompleteApprovedWOAsync(WorkIDs, NewRepairDate, ChangeUser);
        }
        
        public MercPlusLibrary.ErrMessage[] UpdateApproveWorkOrder(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.UpdateApproveWorkOrder(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateApproveWorkOrderAsync(int WOID, string User, string OldStatusOrRemark, string VendorRefNo) {
            return base.Channel.UpdateApproveWorkOrderAsync(WOID, User, OldStatusOrRemark, VendorRefNo);
        }
        
        public string GetVenRefNoByWOID(int WOID) {
            return base.Channel.GetVenRefNoByWOID(WOID);
        }
        
        public System.Threading.Tasks.Task<string> GetVenRefNoByWOIDAsync(int WOID) {
            return base.Channel.GetVenRefNoByWOIDAsync(WOID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MercWorkOrderWebService.WorkOrderServiceReference.ReviewResponse MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder.Review(MercWorkOrderWebService.WorkOrderServiceReference.ReviewRequest request) {
            return base.Channel.Review(request);
        }
        
        public MercPlusLibrary.ErrMessage[] Review(ref MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList, bool ClientCall) {
            MercWorkOrderWebService.WorkOrderServiceReference.ReviewRequest inValue = new MercWorkOrderWebService.WorkOrderServiceReference.ReviewRequest();
            inValue.WorkOrderDetail = WorkOrderDetail;
            inValue.EquipmentList = EquipmentList;
            inValue.ClientCall = ClientCall;
            MercWorkOrderWebService.WorkOrderServiceReference.ReviewResponse retVal = ((MercWorkOrderWebService.WorkOrderServiceReference.IManageWorkOrder)(this)).Review(inValue);
            WorkOrderDetail = retVal.WorkOrderDetail;
            return retVal.ReviewResult;
        }
        
        public System.Threading.Tasks.Task<MercWorkOrderWebService.WorkOrderServiceReference.ReviewResponse> ReviewAsync(MercWorkOrderWebService.WorkOrderServiceReference.ReviewRequest request) {
            return base.Channel.ReviewAsync(request);
        }
        
        public MercPlusLibrary.ErrMessage[] SubmitWorkOrder(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList) {
            return base.Channel.SubmitWorkOrder(WorkOrderDetail, EquipmentList);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> SubmitWorkOrderAsync(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList) {
            return base.Channel.SubmitWorkOrderAsync(WorkOrderDetail, EquipmentList);
        }
        
        public MercPlusLibrary.WorkOrderDetail[] GetAuditRecord(string WOID) {
            return base.Channel.GetAuditRecord(WOID);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail[]> GetAuditRecordAsync(string WOID) {
            return base.Channel.GetAuditRecordAsync(WOID);
        }
        
        public MercPlusLibrary.WorkOrderDetail GetWOAdditionalDetails(string orderNo) {
            return base.Channel.GetWOAdditionalDetails(orderNo);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.WorkOrderDetail> GetWOAdditionalDetailsAsync(string orderNo) {
            return base.Channel.GetWOAdditionalDetailsAsync(orderNo);
        }
        
        public MercPlusLibrary.ErrMessage[] SaveAsDraft(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList) {
            return base.Channel.SaveAsDraft(WorkOrderDetail, EquipmentList);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> SaveAsDraftAsync(MercPlusLibrary.WorkOrderDetail WorkOrderDetail, MercPlusLibrary.Equipment[] EquipmentList) {
            return base.Channel.SaveAsDraftAsync(WorkOrderDetail, EquipmentList);
        }
        
        public MercPlusLibrary.ErrMessage[] ChangeStatus(int WOID, System.Nullable<short> WOStatus, string ChangeUser) {
            return base.Channel.ChangeStatus(WOID, WOStatus, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> ChangeStatusAsync(int WOID, System.Nullable<short> WOStatus, string ChangeUser) {
            return base.Channel.ChangeStatusAsync(WOID, WOStatus, ChangeUser);
        }
        
        public MercPlusLibrary.RemarkEntry[] LoadRemarksDetails(int WOID) {
            return base.Channel.LoadRemarksDetails(WOID);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.RemarkEntry[]> LoadRemarksDetailsAsync(int WOID) {
            return base.Channel.LoadRemarksDetailsAsync(WOID);
        }
        
        public MercPlusLibrary.ErrMessage[] AddRemarkByTypeAndWOID(int WOID, string Remarks, string RemarksType, string ChangeUser) {
            return base.Channel.AddRemarkByTypeAndWOID(WOID, Remarks, RemarksType, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> AddRemarkByTypeAndWOIDAsync(int WOID, string Remarks, string RemarksType, string ChangeUser) {
            return base.Channel.AddRemarkByTypeAndWOIDAsync(WOID, Remarks, RemarksType, ChangeUser);
        }
        
        public MercPlusLibrary.ErrMessage[] UpdateThirdPartyCause(int WOID, string NewThirdParty, string NewCause, string ChangeUser) {
            return base.Channel.UpdateThirdPartyCause(WOID, NewThirdParty, NewCause, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateThirdPartyCauseAsync(int WOID, string NewThirdParty, string NewCause, string ChangeUser) {
            return base.Channel.UpdateThirdPartyCauseAsync(WOID, NewThirdParty, NewCause, ChangeUser);
        }
        
        public MercPlusLibrary.ErrMessage[] UpdateRepairDateByWOID(int WOID, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateRepairDateByWOID(WOID, NewRepairDate, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateRepairDateByWOIDAsync(int WOID, System.Nullable<System.DateTime> NewRepairDate, string ChangeUser) {
            return base.Channel.UpdateRepairDateByWOIDAsync(WOID, NewRepairDate, ChangeUser);
        }
        
        public MercPlusLibrary.ErrMessage[] UpdateSerialNumber(int WOID, string RepairCode, string PartNumber, string SerialNumber, string ChangeUser) {
            return base.Channel.UpdateSerialNumber(WOID, RepairCode, PartNumber, SerialNumber, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateSerialNumberAsync(int WOID, string RepairCode, string PartNumber, string SerialNumber, string ChangeUser) {
            return base.Channel.UpdateSerialNumberAsync(WOID, RepairCode, PartNumber, SerialNumber, ChangeUser);
        }
        
        public MercPlusLibrary.ErrMessage[] UpdateRevNo(int WOID) {
            return base.Channel.UpdateRevNo(WOID);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateRevNoAsync(int WOID) {
            return base.Channel.UpdateRevNoAsync(WOID);
        }
        
        public MercPlusLibrary.ErrMessage[] UpdateShopWorkingSwitch(int WOID, string Switch, string ChangeUser) {
            return base.Channel.UpdateShopWorkingSwitch(WOID, Switch, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> UpdateShopWorkingSwitchAsync(int WOID, string Switch, string ChangeUser) {
            return base.Channel.UpdateShopWorkingSwitchAsync(WOID, Switch, ChangeUser);
        }
        
        public System.Collections.Generic.Dictionary<string, object> GetPrevStatusDateLoc(int WOID, string WOIndicator) {
            return base.Channel.GetPrevStatusDateLoc(WOID, WOIndicator);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> GetPrevStatusDateLocAsync(int WOID, string WOIndicator) {
            return base.Channel.GetPrevStatusDateLocAsync(WOID, WOIndicator);
        }
        
        public bool AuthenticateShopCodeByUserID(string ShopCode, int UserID) {
            return base.Channel.AuthenticateShopCodeByUserID(ShopCode, UserID);
        }
        
        public System.Threading.Tasks.Task<bool> AuthenticateShopCodeByUserIDAsync(string ShopCode, int UserID) {
            return base.Channel.AuthenticateShopCodeByUserIDAsync(ShopCode, UserID);
        }
        
        public MercPlusLibrary.ErrMessage[] CompleteWorkOrderByID(int WOID, System.DateTime RepairDate, string ChangeUser) {
            return base.Channel.CompleteWorkOrderByID(WOID, RepairDate, ChangeUser);
        }
        
        public System.Threading.Tasks.Task<MercPlusLibrary.ErrMessage[]> CompleteWorkOrderByIDAsync(int WOID, System.DateTime RepairDate, string ChangeUser) {
            return base.Channel.CompleteWorkOrderByIDAsync(WOID, RepairDate, ChangeUser);
        }
    }
}
